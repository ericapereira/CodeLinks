
<div class="lessons">
    <h1>Python Lessons</h1>
<div class="lesson">
  <h2>What is Computer Science and Why We Care?</h2>

  <div class="learning-o">
    <p>Learning Objective: Students will learn about the impact that technology has in their everyday lives. Students will learn about the different fields and opportunities in the technology sector. Computer Science is everywhere.
    </p>
  </div>

  <div class="summary">
    <p>Summary: Computer Science is the study of computer elements and computing. Computers run computer programs to improve the quality of our lives. The people who write the computer programs are called Computer Scientists. Computer Scientists develop
      technologies that we use everyday. The technology field goes beyond computers, and technology is becoming more and more interdisciplinary everyday. Computer Science is everywhere and it is important for us to understand the technology that shapes our
      lives.
    </p>
  </div>

  <div class="discussion">
    <p>Discussion: What is your favorite website/mobile application? What was the purpose behind that app? Can you think of an app or website that has changed people’s lives?</p>
  </div>

  <div class="img-g">
    <%= image_tag("code.jpeg", :alt => "rss feed") %>
  </div>
</div>

<div class="lesson">
  <h2>Computer Science Philosophy
  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn to define an algorithm. An algorithm is a set of instructions. Students will learn the flow of a computer program. Computer Scientist write code using computer languages.
    </p>
  </div>

  <div class="summary">
    <p>Summary: An algorithm is a set of instructions. Computer Scientists write algorithms for computers to execute. The flow of a computer program is from top down but there are exceptions. In the mid 20th century, computers were massive and
      instructions were difficult to write. Over the years Computer Scientists have made it easier for normal people to learn how to write a computer program. Today, we can write computer programs without punch cards by using computer languages.
    </p>
  </div>

  <div class="discussion">
    <p>Discussion: Discuss everyday algorithms. Think about the exact steps and how the order matters.

    </p>
  </div>
</div>

<div class="lesson">
  <h2>Using Python
  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn of the different programming languages. Students will be introduced to Python syntax. Students will learn to open repl.it and execute print statements onto the terminal window.
    </p>
  </div>

  <div class="summary">
    <p>Summary: Python is a high level programming language. Python was created by Guido van Rossum, and it was released in 1991. By learning Python syntax we can write computer programs to do amazing things! We will use repl.it to write and run our
      first program. We first write our code and then ‘run’ it.
    </p>
  </div>

  <div class="activity">
    <p>Activity: Set up repl.it accounts. Open repl.it and write our first print statement ‘hello world’.
    </p>
  </div>

  <div class="img">
    <%= image_tag("replit.png", :alt => "rss feed") %>
  </div>
</div>

<div class="lesson">
  <h2>Data Types and Variables

  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will be exposed to various data types. Students will learn about data storage and variables. Students will learn how to use the assignment operator.
    </p>
  </div>

  <div class="summary">
    <p>Summary: At a low level, computers cannot tell the difference between words and integers. Data types allow us to classify data so that computers know its type in value. We use the ‘=’ operator to assign a value to a variable. In Python, we do not
      need to define the variable type before assigning it. We can change the value of our variable at any given time in our program. The computer will process variables as its given value in that line of code. We can use the type() function to determine
      the type of a variable.
    </p>
  </div>

  <div class="activity">
    <p>Activity: Create a variable labeled ‘age’. Assign your current age to the variable and print it out. Next, create a variable with any value, print the variable, change the value of the variable and print it out again. Practice using type() function.
    </p>
  </div>
</div>

<div class="lesson">
  <h2>Strings, Ints, and Floats
  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn to define String, int, and float variables. Students will learn how to escape string characters.
    </p>
  </div>

  <div class="summary">
    <p>Summary: Strings, or string literals are surrounded by either single or double quotes. Its value is defined inside the quotes. Ints are whole numbers in python. Floats are decimal numbers.
    </p>
  </div>

  <div class="activity">
    <p>Activity: Define and print a float variable.
    </p>
  </div>
</div>

<div class="lesson">
  <h2>Comments and Type Casting
  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn how to make comments in python and how to use caste data types.
    </p>
  </div>

  <div class="summary">
    <p>Summary: Computer Scientists often write thousands and thousands of lines of code. We can use comments for many things. Multi-line comments are started with 3 single quotes and end with 3 single quotes. Line comments start with ‘#’. Another
      important feature in Computer Science is type casting. We can convert one data type to another using a casting function.
    </p>
  </div>

  <div class="activity">
    <p>Activity: Use a casting function to convert 3.0 to 3. Print your before and after results by using the type() function.
    </p>
  </div>
  <div class="discussion">
    <p>Discussion: Why are comments useful? Can you think of an instance when we would need them?
    </p>
  </div>
</div>

<div class="lesson">
  <h2>Arithmetic Operators
  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn to use variables and arithmetic operations.
    </p>
  </div>

  <div class="summary">
    <p>Summary: Computer languages follow PEMDAS in terms of order of operation. When a float is used, the computer will prefer the float data type over an int.
    </p>
  </div>

  <div class="activity">
    <p>Activity: Look up the formula to convert Fahrenheit temperature to Celsius. Convert 15 degrees Fahrenheit to Celsius using the Arithmetic operators. Print your result.
    </p>
  </div>
  <div class="img">
    <%= image_tag("operators.png", :alt => "rss feed") %>
  </div>
</div>

<div class="lesson">
  <h2>Booleans and Comparison Operators.

  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn about the Boolean type, True and False. Students will learn to compare ints, floats and variables using the comparison operators.
    </p>
  </div>

  <div class="summary">
    <p>Summary: Booleans are either True or False. We can use comparison operators to evaluate an expression as a boolean.
    </p>
  </div>

  <div class="activity">
    <p>Activity: Practice using comparison operators. Practice using booleans.
    </p>
  </div>
</div>

<div class="lesson">
  <h2>If Statements and Logical Operators
  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn how to write and use if statements. Students will learn to combine conditionals using logical operators.
    </p>
  </div>

  <div class="summary">
    <p>Summary: If statements are used to instruct the computer what lines of code to execute next. We can use logical operators to combine conditionals. The computer will execute certain parts of the if statement based on the conditional.
    </p>
  </div>
  <div class="activity">
    <p>Activity: Write if statements for 2 different cases. Use else instead of 2 if statements.
    </p>
  </div>

  <div class="discussion">
    <p>Discussion: Can you think of an example in technology that uses conditionals? What about in real life? Why are these important?
    </p>
  </div>

  <div class="img-g">
    <%= image_tag("if.png", :alt => "rss feed") %>
  </div>
</div>

<div class="lesson">
  <h2>Input/Output
  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn to ask user for input. Students will learn to make meaningful changes to user input and output the result in terminal.
    </p>
  </div>

  <div class="summary">
    <p>Summary: We can ask for user input by using the input() function. The input function allows for a prompt to be asked. Once user input is received, we can store the user input in variables. We can process user data to fit our program’s needs.
    </p>
  </div>
  <div class="activity">
    <p>Activity: Practice user input exercises.
    </p>
  </div>

  <div class="discussion">
    <p>Discussion: Can you imagine having technology with no user input? How would that work?
    </p>
  </div>
</div>

<div class="lesson">
  <h2>Built-in Functions
  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn that type(), print(), and input() are Python built-in functions. Students will learn how to use the length function on Strings.
    </p>
  </div>

  <div class="summary">
    <p>Summary: This concept will serve as a review for students to revisit built-in functions they have used. We can use the len() function on String objects to get the length of a given string. We will discuss what it means to ‘call’ a built-in
      function and how the computer knows what to do with the given input.
    </p>
  </div>
  <div class="activity">
    <p>Activity: Practice using the len() function. Ask the user for their name, use the user input to print out the length of their name. Look up another built-in function and read its documentation. Call the functions in your repl.it.
    </p>
  </div>
  <div class="discussion">
    <p>Discussion: Do we think that the len function counts spaces?
    </p>
  </div>
</div>

<div class="lesson">
  <h2>Loops
  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn the concept of loops. Python while loops will be introduced first, followed by for loops.
  </p>
  </div>

  <div class="summary">
    <p>Summary: We can use loops to have a certain set of instructions to be repeated until a condition is no longer true. We will be using conditionals for our while loop. The body of the loop will run as long as the conditional is evaluated to True. To use a for loop, we will be using the range functions. For loops are used when we want the loop of our body to run for a certain number of times or iterations. We can give the range function ints or other data types that are iterable.
</p>
  </div>
  <div class="activity">
    <p>Activity: Print the numbers 1-150 on the screen.
</p>
  </div>
  <div class="discussion">
    <p>Discussion: Why would it be bad if we have a while loop that is never going to False? How can we prevent infinite loops from occurring?
  </p>
  </div>

  <div class="img-g">
    <%= image_tag("loops.jpg", :alt => "rss feed") %>
  </div>
</div>

<div class="lesson">
  <h2>Dictionaries and Lists

  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn about dictionaries and their functionalities. Students will learn to use list and we will compare lists and dictionaries.
</p>
  </div>

  <div class="summary">
    <p>Summary: We can use Dictionaries to map keys to values. A dictionary can be made up of various different data types. One key corresponds to a value in our dictionary and we could update the value after creating our dictionary. Lists are objects that contain various data. The data in lists is stored in cells and accessed using indices. Indices start at 0 and not 1. These are both examples of data structures.
</p>
  </div>
  <div class="activity">
    <p>Activity: Practice making lists and dictionaries. Practice accessing list and dictionary values.
</p>
  </div>
</div>


<div class="lesson">
  <h2>Python Classes and Objects
  </h2>

  <div class="learning-o">
    <p>Learning Objectives: Students will learn the relationship between classes and objects. Students will learn that Python is an object-oriented language which means that we can create classes and create instances from those classes referred to as objects.
</p>
  </div>

  <div class="summary">
    <p>Summary: Object-oriented programming is one of the most powerful and used concepts in programming. We can define classes that serve as footprint for objects. Each object created out of a class will behave in the way we defined it. We can also create functions for any objects of our class to call.
</p>
  </div>
  <div class="activity">
    <p>Activity: Create a class called Student. Create student objects.
</p>
  </div>
  <div class="discussion">
    <p>Discussion: What scenarios might this be useful?
</p>
  </div>
  <div class="img-g">
    <%= image_tag("class.png", :alt => "rss feed") %>
  </div>
</div>
</div>


<div class="project">
  <h2>Final Project</h2>
  <p>Get creative with your student. Implement a project using all main concepts we have learned!</p>
  <div class="img-p">
    <%= image_tag("project.png", :alt => "rss feed") %>
  </div>
</div>

<div class="resources">
  <h2>Resources</h2>
  <ul id="links">
    <li>W3schools: https://www.w3schools.com/python/default.asp</li>
<li>Code.org: https://studio.code.org/courses/csd-2019
</li>
  </ul>
</div>
